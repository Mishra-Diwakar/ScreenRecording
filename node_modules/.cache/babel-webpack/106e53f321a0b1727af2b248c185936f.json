{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/DEll/Angular_Project/solar/solar_project/solar/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as RecordRTC from \"recordrtc\";\nimport { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport let VideoRecordingService = /*#__PURE__*/(() => {\n  class VideoRecordingService {\n    constructor() {\n      this._mediaStream = new Subject();\n      this._blob = new Subject();\n    } // getObservable\n\n\n    getMediaStream() {\n      return this._mediaStream.asObservable();\n    }\n\n    getBlob() {\n      return this._blob.asObservable();\n    }\n\n    startRecording() {\n      this.handleRecording();\n    }\n\n    handleRecording() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        // @ts-ignore\n        _this.mediaStream = yield navigator.mediaDevices.getDisplayMedia({\n          audio: true,\n          video: true\n        });\n\n        _this._mediaStream.next(_this.mediaStream);\n\n        _this.recorder = new RecordRTC(_this.mediaStream, {\n          type: 'video'\n        });\n\n        _this.recorder.startRecording();\n      })();\n    }\n\n    stopRecording() {\n      if (!this.recorder) {\n        return;\n      }\n\n      this.recorder.stopRecording(() => {\n        this.blob = this.recorder.getBlob();\n\n        this._blob.next(URL.createObjectURL(this.blob));\n\n        this.mediaStream.stop();\n        this.recorder.destroy();\n        this.mediaStream = null;\n        this.recorder = null;\n      });\n    }\n\n    downloadRecording() {\n      RecordRTC.invokeSaveAsDialog(this.blob, `${Date.now()}.webm`);\n    }\n\n    clearRecording() {\n      this.blob = null;\n      this.recorder = null;\n      this.mediaStream = null;\n    }\n\n  }\n\n  VideoRecordingService.ɵfac = function VideoRecordingService_Factory(t) {\n    return new (t || VideoRecordingService)();\n  };\n\n  VideoRecordingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: VideoRecordingService,\n    factory: VideoRecordingService.ɵfac\n  });\n  return VideoRecordingService;\n})();","map":null,"metadata":{},"sourceType":"module"}