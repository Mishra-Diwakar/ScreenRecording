{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/DEll/Angular_Project/solar/solar_project/solar/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as RecordRTC from \"recordrtc\";\nimport { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class VideoRecordingService {\n  constructor() {\n    this._mediaStream = new Subject();\n    this._blob = new Subject();\n  } // getObservable\n\n\n  getMediaStream() {\n    return this._mediaStream.asObservable();\n  }\n\n  getBlob() {\n    return this._blob.asObservable();\n  }\n\n  startRecording() {\n    this.handleRecording();\n  }\n\n  handleRecording() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // @ts-ignore\n      _this.mediaStream = yield navigator.mediaDevices.getDisplayMedia({\n        audio: true,\n        video: true\n      });\n\n      _this._mediaStream.next(_this.mediaStream);\n\n      _this.recorder = new RecordRTC(_this.mediaStream, {\n        type: 'video'\n      });\n\n      _this.recorder.startRecording();\n    })();\n  }\n\n  stopRecording() {\n    if (!this.recorder) {\n      return;\n    }\n\n    this.recorder.stopRecording(() => {\n      this.blob = this.recorder.getBlob();\n\n      this._blob.next(URL.createObjectURL(this.blob));\n\n      this.mediaStream.stop();\n      this.recorder.destroy();\n      this.mediaStream = null;\n      this.recorder = null;\n    });\n  }\n\n  downloadRecording() {\n    RecordRTC.invokeSaveAsDialog(this.blob, `${Date.now()}.webm`);\n  }\n\n  clearRecording() {\n    this.blob = null;\n    this.recorder = null;\n    this.mediaStream = null;\n  }\n\n}\n\nVideoRecordingService.ɵfac = function VideoRecordingService_Factory(t) {\n  return new (t || VideoRecordingService)();\n};\n\nVideoRecordingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: VideoRecordingService,\n  factory: VideoRecordingService.ɵfac\n});","map":{"version":3,"sources":["C:\\Users\\DEll\\Angular_Project\\solar\\solar_project\\solar\\src\\app\\video-recording.service.ts"],"names":[],"mappings":";AACA,OAAO,KAAK,SAAZ,MAA2B,WAA3B;AACA,SAAS,OAAT,QAAwB,MAAxB;;AAGA,OAAM,MAAO,qBAAP,CAA4B;AADlC,EAAA,WAAA,GAAA;AAKU,SAAA,YAAA,GAAe,IAAI,OAAJ,EAAf;AACA,SAAA,KAAA,GAAQ,IAAI,OAAJ,EAAR;AAkDT,GAvDiC,CAOhC;;;AACA,EAAA,cAAc,GAAA;AACZ,WAAO,KAAK,YAAL,CAAkB,YAAlB,EAAP;AACD;;AAED,EAAA,OAAO,GAAA;AACL,WAAO,KAAK,KAAL,CAAW,YAAX,EAAP;AACD;;AAED,EAAA,cAAc,GAAA;AACZ,SAAK,eAAL;AACD;;AAEK,EAAA,eAAe,GAAA;AAAA;;AAAA;AACnB;AACA,MAAA,KAAI,CAAC,WAAL,SAAyB,SAAS,CAAC,YAAV,CAAuB,eAAvB,CAAuC;AAC9D,QAAA,KAAK,EAAE,IADuD;AAE9D,QAAA,KAAK,EAAE;AAFuD,OAAvC,CAAzB;;AAIA,MAAA,KAAI,CAAC,YAAL,CAAkB,IAAlB,CAAuB,KAAI,CAAC,WAA5B;;AACA,MAAA,KAAI,CAAC,QAAL,GAAgB,IAAI,SAAJ,CAAc,KAAI,CAAC,WAAnB,EAAgC;AAAE,QAAA,IAAI,EAAE;AAAR,OAAhC,CAAhB;;AACA,MAAA,KAAI,CAAC,QAAL,CAAc,cAAd;AARmB;AASpB;;AAED,EAAA,aAAa,GAAA;AACX,QAAI,CAAC,KAAK,QAAV,EAAoB;AAClB;AACD;;AACD,SAAK,QAAL,CAAc,aAAd,CAA4B,MAAK;AAC/B,WAAK,IAAL,GAAY,KAAK,QAAL,CAAc,OAAd,EAAZ;;AACA,WAAK,KAAL,CAAW,IAAX,CAAgB,GAAG,CAAC,eAAJ,CAAoB,KAAK,IAAzB,CAAhB;;AACA,WAAK,WAAL,CAAiB,IAAjB;AACA,WAAK,QAAL,CAAc,OAAd;AACA,WAAK,WAAL,GAAmB,IAAnB;AACA,WAAK,QAAL,GAAgB,IAAhB;AACD,KAPD;AAQD;;AAED,EAAA,iBAAiB,GAAA;AACf,IAAA,SAAS,CAAC,kBAAV,CAA6B,KAAK,IAAlC,EAAwC,GAAG,IAAI,CAAC,GAAL,EAAU,OAArD;AACD;;AAED,EAAA,cAAc,GAAA;AACZ,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,QAAL,GAAgB,IAAhB;AACA,SAAK,WAAL,GAAmB,IAAnB;AACD;;AArD+B;;;mBAArB,qB;AAAqB,C;;;SAArB,qB;AAAqB,EAAA,OAAA,EAArB,qBAAqB,CAAA","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport * as RecordRTC from \"recordrtc\";\r\nimport { Subject } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class VideoRecordingService {\r\n  private mediaStream: any;\r\n  private recorder: any;\r\n  private blob: any;\r\n  private _mediaStream = new Subject<any>();\r\n  private _blob = new Subject<any>();\r\n  \r\n  // getObservable\r\n  getMediaStream() {\r\n    return this._mediaStream.asObservable();\r\n  }\r\n\r\n  getBlob() {\r\n    return this._blob.asObservable();\r\n  }\r\n\r\n  startRecording() {\r\n    this.handleRecording();\r\n  }\r\n\r\n  async handleRecording() {\r\n    // @ts-ignore\r\n    this.mediaStream = await navigator.mediaDevices.getDisplayMedia({\r\n      audio: true,\r\n      video: true\r\n    });\r\n    this._mediaStream.next(this.mediaStream);\r\n    this.recorder = new RecordRTC(this.mediaStream, { type: 'video' });\r\n    this.recorder.startRecording();\r\n  }\r\n\r\n  stopRecording() {\r\n    if (!this.recorder) {\r\n      return;\r\n    }\r\n    this.recorder.stopRecording(() => {\r\n      this.blob = this.recorder.getBlob();\r\n      this._blob.next(URL.createObjectURL(this.blob));\r\n      this.mediaStream.stop();\r\n      this.recorder.destroy();\r\n      this.mediaStream = null;\r\n      this.recorder = null;\r\n    })\r\n  }\r\n\r\n  downloadRecording() {\r\n    RecordRTC.invokeSaveAsDialog(this.blob, `${Date.now()}.webm`);\r\n  }\r\n\r\n  clearRecording() {\r\n    this.blob = null;\r\n    this.recorder = null;\r\n    this.mediaStream = null;\r\n  }\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}